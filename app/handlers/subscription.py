import logging
from typing import TYPE_CHECKING

from address_parser import AddressParser, Match
from aiogram import F, Router, filters, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.deep_linking import decode_payload

if TYPE_CHECKING:
    from app.admin import Notificator
    from app.services import Storage

logger = logging.getLogger(__name__)

router = Router(name=__name__)


class Filter(StatesGroup):
    filter = State()


@router.message(filters.CommandStart())
async def start_handler(
    message: types.Message,
    command: filters.CommandObject,
    state: FSMContext,
    storage: "Storage",
    notificator: "Notificator",
    address_parser: AddressParser,
):
    if not message.from_user:
        return

    user_id = message.from_user.id
    args = decode_payload(command.args) if command.args else None

    await storage.subscribe(str(user_id), None)
    parsed = await parse_and_subscribe(args, message, storage, state, address_parser)
    if args and not parsed:
        return

    base = "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö"
    if parsed:
        details = f" –ø–æ –∞–¥—Ä–µ—Å—É:\n*{parsed.name}*"
    else:
        details = "\n\nüîç –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filter"
    msg = (
        f"{base}{details}\n\n"
        "‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö: https://005–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫.—Ä—Ñ"
    )
    await message.answer(msg)

    logger.info("User %d subscribed to updates", user_id)

    await notificator.new_user(message.from_user)


@router.message(filters.Command("stop"))
async def stop_handler(message: types.Message, storage: "Storage"):
    if not message.from_user:
        return

    user_id = message.from_user.id
    await storage.unsubscribe(str(user_id))
    await message.answer("üîï –í—ã *–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å* –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö")

    logger.info("User %d unsubscribed from updates", user_id)


@router.message(filters.Command("filter"))
async def filter_handler(message: types.Message, storage: "Storage", state: FSMContext):
    if not message.from_user:
        return

    f = await storage.get_filter(str(message.from_user.id))
    filter_text = ""
    if f.street:
        filter_text = f"\n\n*–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:* {f.street}"

    await state.set_state(Filter.filter)
    await message.answer(
        f"üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π{filter_text}",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            one_time_keyboard=True,
            resize_keyboard=True,
        ),
    )


@router.message(Filter.filter, F.text == "–û—Ç–º–µ–Ω–∞")
async def filter_cancel_handler(
    message: types.Message, state: FSMContext, storage: "Storage"
):
    if not message.from_user:
        return

    await state.clear()

    f = await storage.get_filter(str(message.from_user.id))
    await message.answer(
        (
            f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {f.street}"
            if f.street
            else "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        ),
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.message(Filter.filter, ~F.text.startswith("/"))
async def filter_value_handler(
    message: types.Message,
    storage: "Storage",
    state: FSMContext,
    address_parser: AddressParser,
):
    parsed = await parse_and_subscribe(
        message.text, message, storage, state, address_parser
    )
    if not parsed:
        return

    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: " + parsed.name,
        reply_markup=types.ReplyKeyboardRemove(),
    )


async def parse_and_subscribe(
    value: str | None,
    message: types.Message,
    storage: "Storage",
    state: FSMContext,
    address_parser: AddressParser,
) -> Match | None:
    if not message.from_user or not value:
        return

    user_id = message.from_user.id
    value = value.strip()

    parsed = await address_parser.normalize(value)
    if not parsed:
        await state.set_state(Filter.filter)
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–ª–∏—Ü—É!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ *—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã*, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –õ–µ–Ω–∏–Ω–∞\n- –ú–∏—Ä–∞"
        )
        return

    if parsed.confidence < 0.85:
        await state.set_state(Filter.filter)
        await message.answer(
            f"üîç –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É *{parsed.name}*?\n\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\nüîÑ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text=parsed.name)],
                    [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
                ],
                resize_keyboard=True,
                one_time_keyboard=True,
            ),
        )
        return

    await storage.subscribe(str(user_id), parsed.name)

    return parsed
